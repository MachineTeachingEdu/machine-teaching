"""
Django settings for machineteaching project.

Generated by 'django-admin startproject' using Django 2.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from dotenv import load_dotenv
load_dotenv()  # loads the configs from .env
from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("APP_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(os.getenv("DEBUG"))

ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS").split(",")

CSRF_TRUSTED_ORIGINS = os.getenv("CSRF_TRUSTED_ORIGINS").split(",")

# Application definition

INSTALLED_APPS = [
    'questions',
    'evaluation',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'maintenance_mode',
    'django_extensions',
    'simple_history',
    'import_export',
    'rest_framework',
    'downloadDB',
    'api'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
    'maintenance_mode.middleware.MaintenanceModeMiddleware',
]

ROOT_URLCONF = 'machineteaching.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'questions.context_processors.context',
            ],
        },
    },
]

WSGI_APPLICATION = 'machineteaching.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv("DB_ENGINE", 'django.db.backends.postgresql_psycopg2'),
        'NAME': os.getenv("DB_NAME"),
        'USER': os.getenv("DB_USER"),
        'PASSWORD': os.getenv("DB_PASSWORD"),
        'HOST': os.getenv("DB_HOST"),
        'PORT': os.getenv("DB_PORT"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/
LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# LOCALE_PATHS = (
#     'locale',
# )
LOCALE_PATHS = [os.path.join(BASE_DIR, 'locale')]

# LOGIN
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'
AUTHENTICATION_BACKENDS = ['questions.backends.EmailBackend']
EMAIL_HOST = 'smtp.sendgrid.net'
EMAIL_PORT = 587
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER", 'apikey')
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL= os.getenv("DEFAULT_FROM_EMAIL", "equipe@machineteaching.tech")

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_ROOT = '/'
STATIC_URL = '/static/'


STATICFILES_DIRS = ( os.path.join('staticfiles'), )

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'questions')

# Disable revert option from admin
SIMPLE_HISTORY_REVERT_DISABLED=True
IMPORT_EXPORT_USE_TRANSACTIONS = True

# Document Topic shape
DOC_TOPIC_SHAPE = (55, 5)

# Problem selection strategies
STRATEGIES = ("random", "eer")

# Max Evaluation Count
# How many solutions each user should evaluate
MAX_EVAL_COUNT = 15
# DEBUG MAX_EVAL_COUNT
#MAX_EVAL_COUNT = 2

# Notebook options
NOTEBOOK_ARGUMENTS = [
    '--ip', '0.0.0.0',
    '--no-browser'
]

# Maintenance mode
MAINTENANCE_MODE = False
# if True admin site will not be affected by the maintenance-mode page
MAINTENANCE_MODE_IGNORE_ADMIN_SITE = True
# if True the superuser will not see the maintenance-mode page
MAINTENANCE_MODE_IGNORE_SUPERUSER = True
SHOW_SATISFACTION_FORM = False

# LOGGING
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        # Include the default Django email handler for errors
        # This is what you'd get without configuring logging at all.
        'mail_admins': {
            'class': 'django.utils.log.AdminEmailHandler',
            'level': 'ERROR',
             # But the emails are plain text by default - HTML is nicer
            'include_html': True,
        },
        # Log to a text file that can be rotated by logrotate
        # 'logfile': {
        #     'class': 'logging.handlers.WatchedFileHandler',
        #     'filename': os.path.join(BASE_DIR, "mt_dev.log")
        # },
    },
    'loggers': {
        # Again, default Django configuration to email unhandled exceptions
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
        # Might as well log any errors anywhere else in Django
        'django': {
            'handlers': [],
            'level': 'ERROR',
            'propagate': False,
        },
        # Your own app - this assumes all your logger names start with "myapp."
        'machineteaching': {
            'handlers': [],
            'level': 'DEBUG', # Or maybe INFO or DEBUG
            'propagate': False
        },
        # Your own app - this assumes all your logger names start with "myapp."
        'questions': {
            'handlers': [],
            'level': 'DEBUG', # Or maybe INFO or DEBUG
            'propagate': False
        },
        # Your own app - this assumes all your logger names start with "myapp."
        'evaluation': {
            'handlers': [],
            'level': 'DEBUG', # Or maybe INFO or DEBUG
            'propagate': False
        },
    },
}

TEST_SUPERUSER_USER="superuser@machineteaching.tech"
TEST_SUPERUSER_EMAIL="superuser@machineteaching.tech"
TEST_SUPERUSER_PASSWORD="superSenhaUser"
TEST_GNAME="Usu√°rio"
TEST_SNAME="Teste"
TEST_MANAGER="professor@machineteaching.tech"
TEST_PASSWORD="senhaTeste"
TEST_USER="usuario@machineteaching.tech"

WORKER_NODE_HOST = os.getenv('WORKER_NODE_HOST')
WORKER_NODE_PORT = os.getenv('WORKER_NODE_PORT')