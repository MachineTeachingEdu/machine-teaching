# Generated by Django 2.2.5 on 2021-07-29 07:06

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


def copy_onlineclass(apps, schema_editor):
    UserLog = apps.get_model('questions', "UserLog")

    for obj_userlog in UserLog.objects.all():
        user_class = obj_userlog.user.userprofile.user_class
        obj_userlog.user_class = user_class
        obj_userlog.save()

def uncopy_onlineclass(apps, schema_editor):
    UserLog = apps.get_model('questions', "UserLog")

    for obj_userlog in UserLog.objects.all():
        obj_userlog.user_class = None
        obj_userlog.save()


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('questions', '0076_auto_20210416_0225'),
    ]

    operations = [
        migrations.RunSQL("""drop view if exists questions_userlogview"""),
        migrations.AlterModelOptions(
            name='comment',
            options={'verbose_name': 'Comment'},
        ),
        migrations.AddField(
            model_name='userlog',
            name='user_class',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='questions.OnlineClass'),
        ),
        migrations.AlterField(
            model_name='userlog',
            name='problem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='questions.Problem'),
        ),
        migrations.AlterField(
            model_name='userlog',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='HistoricalExerciseSet',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('order', models.PositiveIntegerField()),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('chapter', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='questions.Chapter')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('problem', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='questions.Problem')),
            ],
            options={
                'verbose_name': 'historical Exercise Set',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.RunSQL("""
CREATE VIEW questions_userlogview as
select
	grouped_query.user_id, grouped_query.problem_id, grouped_query.outcome, grouped_query.final_outcome,
	(select
		timestamp
	from
		questions_userlog, questions_userprofile, questions_onlineclass
	where questions_userlog.user_id = grouped_query.user_id and
		questions_userlog.problem_id = grouped_query.problem_id and
		questions_userlog.outcome = grouped_query.final_outcome and
		questions_userlog.user_id = questions_userprofile.user_id and
		questions_userprofile.user_class_id = questions_onlineclass.id and
		questions_userlog."timestamp" >= questions_onlineclass.start_date
	order by timestamp asc limit 1) as timestamp
from
(
	select distinct_query.user_id, distinct_query.problem_id, sum(distinct_query.outcome) as outcome,
	case
		when sum(distinct_query.outcome) >= 4 then 'P'
		when sum(distinct_query.outcome) >=2 then 'F'
		when sum(distinct_query.outcome) = 1 then 'S'
	end as final_outcome
	from (
		select questions_userlog.user_id, problem_id,
			case
				when outcome = 'P' then 4
				when outcome = 'F' then 2
				when outcome = 'S' then 1
			end as outcome
		from questions_userlog, questions_userprofile, questions_onlineclass
		where questions_userlog.user_id = questions_userprofile.user_id
		and questions_userprofile.user_class_id = questions_onlineclass.id
		and questions_userlog."timestamp" >= questions_onlineclass.start_date
		group by questions_userlog.user_id, problem_id,
		outcome order by questions_userlog.user_id, problem_id
		) as distinct_query
	group by distinct_query.user_id, distinct_query.problem_id
	order by distinct_query.user_id, distinct_query.problem_id) as grouped_query;""",
        "drop view questions_userlogview"),
        migrations.RunPython(copy_onlineclass, uncopy_onlineclass),
    ]
